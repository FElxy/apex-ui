<template>
  <div class="apex-input-number">
    <text class="apex-input-number-minus {{ my_value <= my_min ? 'apex-input-number-disabled' : '' }}"
          data-disabled="{{ my_value <= my_min }}" onclick="handleMinus">-
    </text>
    <input class="apex-input-number-text {{ my_min >= my_max ? 'apex-input-number-disabled' : '' }}" type="number"
           value="{{ my_value }}" disabled="{{ my_min >= my_max }}" onchange="handleChange"/>
    <text class="apex-input-number-plus {{ my_value >= my_max ? 'apex-input-number-disabled' : '' }}"
          data-disabled="{{ my_value >= my_max }}" onclick="handlePlus">+
    </text>
  </div>
</template>
<style lang="less">
  @import '../styles/base';

  .apex-input-number {
    color: @text-color;
    flex-direction: row;
    align-self: baseline;

    text {
      height: 60px;
      width: 80px;
      text-align: center;
      font-size: @size-font-small;
      border: 1px solid @border-color-base;
    }

    &-minus {
      border-radius: 2px;
    }
    &-plus {
      border-radius: 2px;
    }

    &-text {
      border-top-width: 1px;
      border-bottom-width: 1px;
      border-style: solid;
      border-top-color: #dddee1;
      border-bottom-color: #dddee1;
      text-align: center;
      height: 60px;
      line-height: 60px;
      width: 70px;
      font-size: @size-font-small;
    }

    &-disabled {
      border-color: @btn-disable-border;
      color: @btn-disable-color;
      background-color: @btn-disable-bg;
    }
  }
</style>
<script>
    import {addNum} from "../common/scripts/util";

    export default {
        props: {
            value: {
                default: 1
            },
            min: {
                default: -Infinity
            },
            max: {
                default: Infinity
            },
            step: {
                default: 1
            }
        },

        data() {
            return {
                my_value: this.value,
                my_step: this.step,
                my_min: this.min,
                my_max: this.max
            }
        },

        handleChangeStep(e, type) {
            const {dataset = {}} = e.target;
            const {disabled} = dataset;
            const {my_step} = this._data;
            let {my_value} = this._data;

            if (disabled) return null;

            if (type === 'minus') {
                this._data.my_value = addNum(my_value, -my_step);
            } else if (type === 'plus') {
                this._data.my_value = addNum(my_value, my_step);
            }

            if (my_value < this._data.my_min || my_value > this._data.my_max) return null;

            this.handleEmit(my_value, type);
        },

        handleMinus(e) {
            this.handleChangeStep(e, 'minus');
        },

        handlePlus(e) {
            this.handleChangeStep(e, 'plus');
        },

        handleChange(e) {
            console.log('change', e);
            const _this = this;
            let {value} = e;
            const {my_min, my_max} = this._data;

            if (!value) {
                setTimeout(() => {
                    _this.handleEmit(value);
                }, 16);
                return;
            }

            this._data.my_value = +value;
            if (value > my_max) {
                value = my_max;
            } else if (value < my_min) {
                value = my_min;
            }

            this.handleEmit(value);
        },

        handleEmit(value, type) {
            const data = {
                value: value
            };
            if (type) data.type = type;

            this.$emit('change', data);
        }
    }
</script>
